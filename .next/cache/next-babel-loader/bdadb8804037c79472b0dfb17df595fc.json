{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { actionTypes } from '../../constants/actionTypes';\n\nfunction categoryDataReducer(state = {}, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case actionTypes.ADD_CURRENT_CATEGORY:\n      return _objectSpread({}, state, {\n        currentCategory: payload\n      });\n\n    case actionTypes.ADD_NEW_CATEGORY:\n      return _objectSpread({}, state, {\n        newCategory: payload\n      });\n\n    case actionTypes.LOAD_CATEGORIES:\n      return _objectSpread({}, state, {\n        categories: payload\n      });\n\n    case actionTypes.ADD_CATEGORY_IN_LIST:\n      return _objectSpread({}, state, {\n        categories: [...state.categories, payload]\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default categoryDataReducer;","map":{"version":3,"sources":["/home/natalia/Documents/projects/news_project/src/redux/Categories/categoryDataReducer.js"],"names":["actionTypes","categoryDataReducer","state","type","payload","ADD_CURRENT_CATEGORY","currentCategory","ADD_NEW_CATEGORY","newCategory","LOAD_CATEGORIES","categories","ADD_CATEGORY_IN_LIST"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,6BAA5B;;AAEA,SAASC,mBAAT,CAA6BC,KAAK,GAAG,EAArC,EAAyC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAzC,EAA4D;AACxD,UAAQD,IAAR;AACG,SAAKH,WAAW,CAACK,oBAAjB;AACK,+BAAYH,KAAZ;AAAmBI,QAAAA,eAAe,EAAEF;AAApC;;AAEJ,SAAKJ,WAAW,CAACO,gBAAjB;AACI,+BAAYL,KAAZ;AAAmBM,QAAAA,WAAW,EAAEJ;AAAhC;;AAEJ,SAAKJ,WAAW,CAACS,eAAjB;AACI,+BAAYP,KAAZ;AAAmBQ,QAAAA,UAAU,EAAEN;AAA/B;;AAEJ,SAAKJ,WAAW,CAACW,oBAAjB;AACI,+BAAYT,KAAZ;AAAmBQ,QAAAA,UAAU,EAAE,CAAC,GAAGR,KAAK,CAACQ,UAAV,EAAsBN,OAAtB;AAA/B;;AAEJ;AACI,aAAOF,KAAP;AAdR;AAgBH;;AAED,eAAeD,mBAAf","sourcesContent":["import { actionTypes } from '../../constants/actionTypes';\n\nfunction categoryDataReducer(state = {}, { type, payload }) {\n    switch (type) {\n       case actionTypes.ADD_CURRENT_CATEGORY:\n            return { ...state, currentCategory: payload };\n\n        case actionTypes.ADD_NEW_CATEGORY:\n            return { ...state, newCategory: payload };\n\n        case actionTypes.LOAD_CATEGORIES:\n            return { ...state, categories: payload };\n\n        case actionTypes.ADD_CATEGORY_IN_LIST:\n            return { ...state, categories: [...state.categories, payload]};\n\n        default:\n            return state\n    }\n}\n\nexport default categoryDataReducer"]},"metadata":{},"sourceType":"module"}